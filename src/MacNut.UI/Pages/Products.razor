@page "/products"
@inject MacNutDbContext dbContext
@using MacNut.UI.Data

<PageTitle>Food Products</PageTitle>

<MudText Typo="Typo.h5">Products</MudText>

<p>List of food products and their nutritional info.</p>

@if (_products is null)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
}
else
{
    <div class="d-flex justify-end py-8">
        <MudButton Href="/importProducts" Variant="Variant.Outlined" Color="Color.Primary">
            Import from openfoodfacts.org
        </MudButton>
    </div>

    <MudTable Items="@_products" Hover="true"
              Breakpoint="Breakpoint.Sm"
              Loading="@_loading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Manufacturer</MudTh>
            <MudTh>Categories</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Manufacturer</MudTd>
            <MudTd>
                @CategoryList(@context)
            </MudTd>
        </RowTemplate>
    </MudTable>
}

    @code {

    private IEnumerable<Product>? _products;

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    private bool _loading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _products = await dbContext
            .Products
            .Include(p => p.Categories)
            .ToListAsync();

        _loading = false;

        StateHasChanged();
    }

    private void NavToProductImport()
    {
    }


    private string CategoryList(Product product)
    {
        var sb = new StringBuilder();

        var row = 1;
        foreach(var c in product.Categories)
        {
            var part = c.Id.Value.Replace("en:", "");
            var lCaps = true;
            if (row++ > 1) sb.Append(", "); 
            foreach(var chr in part)
            {
                switch (chr)
                {
                    case '-':
                        sb.Append(' ');
                        lCaps = true;
                        break;

                    default:
                        sb.Append(lCaps ? char.ToUpper(chr) : chr);
                        lCaps = false;
                        break;
                }
            }
        }
        return sb.ToString();
    }
}